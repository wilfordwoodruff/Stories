---
title: "Wilford Woodruff Projects"
execute:
    warning: false
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
---    

## Welcome to the BYU-Idaho Project Host 

There's been a lot of work the last few semesters. This will someday make every page adaptable, so that you can see any group of pages in lots of different ways.



## Customize your Writings
```{ojs}
df = d3.csv("https://raw.githubusercontent.com/wilfordwoodruff/Public_Stories/main/code/Stories/Sample%20Subset.csv")


viewof startdate = Inputs.date({label: "Start",value: '1841-01-01', min: "1841-01-01", max: "1898-02-08"})

viewof enddate = Inputs.date({label: "End",value: '1898-02-08', min: "1841-01-01", max: "1898-02-08"})



viewof journalType = Inputs.checkbox(['Journals','Discourses','Letters','Autobiographies','Additional','Daybooks'],{label:'Document Type', value: ['Journals','Discourses','Letters','Autobiographies','Additional','Daybooks']})


viewof text = Inputs.text({label: "Word Search", placeholder: "Only show documents that say..."})


```

```{ojs}

searched = df.filter(row => {
    for (const key in row){
        if (row.hasOwnProperty(key) && row[key].toString().toLowerCase().includes(text)) {
            return true;
        }
    }
    return false;
    })
    .filter(function(d) {
        return journalType.includes(d['Document Type']);
})
    .filter(d => Date.parse(d.date) > startdate 
            && Date.parse(d.date) < enddate);

viewof table = Inputs.table(searched, 
    {
    columns:["Document Type","Short URL",'date',"Topics"],
    rows:20}
)
```
<!--
groups = d3.group(df, d => d['Journal Type'])
const searchQuery = text.value.toLowerCase();
const columnValue = row.columnName;
viewof topics = Inputs.select([null].concat(groups),{label: "Topical Search", multiple: true})
-->
viewof submitButton = Inputs.button("Submit Filters")

// Assuming you have a submit button with the ID "submitButton"
const submitButton = document.getElementById('submitButton');

  const csvContent = d3.csvFormat(yourDataframe);

  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const downloadLink = document.createElement('a');
  const url = URL.createObjectURL(blob);
  downloadLink.href = url;
  downloadLink.download = 'data.csv';
  document.body.appendChild(downloadLink);
  downloadLink.click();
  document.body.removeChild(downloadLink);
});


## Submit
```{ojs}
import {serialize} from "@palewire/saving-csv"
DOM.download(serialize(searched), null, "Download CSV")
```

## Choose your Display
This will (eventually) automatically export that cut dataframe, push it to Github, then re-render a chosen Quarto using that dataframe. 

<table>
  <tr>
    <td><a href="code/Stories/Map Locations by Query.html">
        <img src="code/icons/scalable map2.png" alt="Easily Queried Map" title='Easily Queried Map'>
        </a>
    </td>
    <td><a href="https://clarabrobergseniorproject.netlify.app/posts/final_project/">
        <img src="code/icons/claras2.png" alt="Clara's Senior Project" title="Clara's Senior Project">
        </a>
    </td>
  </tr>
</table>
