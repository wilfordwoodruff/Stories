---
title: "Wilford Woodruff Projects"
execute:
    warning: false
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
---    

## Welcome to the BYU-Idaho Project Host 

There's been a lot of work the last few semesters. This will someday make every page adaptable, so that you can see any group of pages in lots of different ways.



## Customize your Writings
```{ojs}
df = d3.csv("https://raw.githubusercontent.com/wilfordwoodruff/Public_Stories/main/code/Stories/Sample%20Subset.csv")

// Starting date, match the first journal
viewof startdate = Inputs.date({label: "Start",value: '1841-01-01', min: "1841-01-01", max: "1898-02-08"})

// End date, matches the last journal
viewof enddate = Inputs.date({label: "End",value: '1898-02-08', min: "1841-01-01", max: "1898-02-08"})


// Pick which journal type to see
viewof journalType = Inputs.checkbox(['Journals','Discourses','Letters','Autobiographies','Additional','Daybooks'],{label:'Document Type', value: ['Journals','Discourses','Letters','Autobiographies','Additional','Daybooks']})

// Text to search by
viewof text = Inputs.text({label: "Word Search", placeholder: "Only show documents that say..."})


```

<!-- Filters each row for...
1) Word Search- if any column contains that phrase
2) Document Type- if that column contains any of the checks
3) Dates- if it is between the Start and End days
We will add a drop-down list of Topics when it comes
-->
```{ojs}

searched = df.filter(row => {
    for (const key in row){
        if (row.hasOwnProperty(key) && row[key].toString().toLowerCase().includes(text)) {
            return true;
        }
    }
    return false;
    })
    //Just the right document type
    .filter(function(d) {
        return journalType.includes(d['Document Type']);
})    // Just the dates
    .filter(d => Date.parse(d.date) > startdate 
            && Date.parse(d.date) < enddate);

viewof table = Inputs.table(searched, 
    {
    columns:["Document Type","Short URL",'date',"Topics"],
    rows:20}
)
```
<!--
groups = d3.group(df, d => d['Journal Type'])
const columnValue = row.columnName;
viewof topics = Inputs.select([null].concat(groups),{label: "Topical Search", multiple: true})

import {createCSV} from "@resmartizh/export-functions"

viewof submitButton = Inputs.button("Submit Filters")
makeCSV = {
    submitButton;
    createCSV(searched)
}


<button onclick="pushToGitHub()">Push CSV to GitHub</button>
  <script src="script.js"></script>
-->
## Submit

```{ojs}
viewof submitButton = Inputs.button("Submit Filters")
pushToGitHub= {
  submitButton;
  // Define the repository details
  let owner = 'wilfordwoodruff';
  let repo = 'Public_Stories';
  let filePath = 'society/user_query.csv'; // The desired path and name of the CSV file in the repository
 
    // Set up the GitHub API endpoint
    const apiUrl = `https://api.github.com/repos/${owner}/${repo}/contents/${filePath}`;
  
    // Create the file using the GitHub API
    fetch(apiUrl, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer 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' // Replace with your personal access token
      },
      body: JSON.stringify({
        message: 'Add CSV file',
        content: btoa(searched) // Encode the CSV content as base64
      })
    })
    .then(response => {
      if (response.ok) {
        alert('CSV file pushed to GitHub successfully!');
      } else {
        alert('Failed to push CSV file to GitHub.');
      }
    })
    .catch(error => {
      alert('An error occurred while pushing the CSV file to GitHub.');
      console.error(error);
    });
  }
```

```{ojs}
submitButton
```



## Choose your Display
This will (eventually) automatically export that cut dataframe, push it to Github, then re-render a chosen Quarto using that dataframe. 

<table>
  <tr>
    <td><a href="code/Stories/Map Locations by Query.html">
        <img src="code/icons/scalable map2.png" alt="Easily Queried Map" title='Easily Queried Map'>
        </a>
    </td>
    <td><a href="https://clarabrobergseniorproject.netlify.app/posts/final_project/">
        <img src="code/icons/claras2.png" alt="Clara's Senior Project" title="Clara's Senior Project">
        </a>
    </td>
  </tr>
</table>
